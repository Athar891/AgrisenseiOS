//
//  EnhancedKrishiAISphere.swift
//  Agrisense
//
//  Created by AI Assistant on 03/10/25.
//  Enhanced ChatGPT-style animated sphere with gradient orb

import SwiftUI

struct EnhancedKrishiAISphere: View {
    let isListening: Bool
    let currentState: LiveAIState
    let audioLevel: CGFloat // For amplitude-based animation
    
    @State private var rotationAngle: Double = 0
    @State private var pulseScale: CGFloat = 1.0
    @State private var innerRotation: Double = 0
    @State private var particleOffset: CGFloat = 0
    
    var body: some View {
        ZStack {
            // Outer glow layers - multiple for depth
            ForEach(0..<3) { index in
                let baseOpacity = 0.3 - Double(index) * 0.1
                let innerOpacity = 0.1 - Double(index) * 0.03
                let startRadius = 60.0 + CGFloat(index) * 20.0
                let endRadius = 100.0 + CGFloat(index) * 30.0
                let frameSize = 200.0 + CGFloat(index) * 40.0
                
                Circle()
                    .fill(
                        RadialGradient(
                            colors: [
                                sphereColor.opacity(baseOpacity),
                                sphereColor.opacity(innerOpacity),
                                Color.clear
                            ],
                            center: .center,
                            startRadius: startRadius,
                            endRadius: endRadius
                        )
                    )
                    .frame(width: frameSize, height: frameSize)
                    .scaleEffect(glowScale)
                    .opacity(glowOpacity)
            }
            
            // Wave expansion effect for listening state
            if currentState == .listening {
                ForEach(0..<2) { index in
                    Circle()
                        .stroke(sphereColor.opacity(0.3), lineWidth: 2)
                        .frame(width: 120, height: 120)
                        .scaleEffect(1.0 + particleOffset + CGFloat(index) * 0.3)
                        .opacity(1.0 - particleOffset - CGFloat(index) * 0.2)
                }
            }
            
            // Main gradient orb
            ZStack {
                // Base sphere with animated gradient
                Circle()
                    .fill(
                        AngularGradient(
                            gradient: Gradient(colors: sphereGradientColors),
                            center: .center,
                            angle: .degrees(rotationAngle)
                        )
                    )
                    .frame(width: 120, height: 120)
                    .overlay(
                        // Shimmer effect
                        Circle()
                            .fill(
                                LinearGradient(
                                    colors: [
                                        Color.white.opacity(0.6),
                                        Color.clear,
                                        Color.white.opacity(0.3)
                                    ],
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                )
                            )
                            .frame(width: 120, height: 120)
                            .rotationEffect(.degrees(innerRotation))
                    )
                
                // Inner highlight sphere
                Circle()
                    .fill(
                        RadialGradient(
                            colors: [
                                Color.white.opacity(0.8),
                                Color.white.opacity(0.4),
                                Color.clear
                            ],
                            center: .center,
                            startRadius: 0,
                            endRadius: 30
                        )
                    )
                    .frame(width: 60, height: 60)
                    .offset(x: -15, y: -15)
                    .blur(radius: 5)
                
                // Glossy overlay
                Circle()
                    .fill(
                        LinearGradient(
                            colors: [
                                Color.white.opacity(0.5),
                                Color.clear
                            ],
                            startPoint: .top,
                            endPoint: .center
                        )
                    )
                    .frame(width: 120, height: 60)
                    .offset(y: -30)
            }
            .scaleEffect(stateBasedScale)
            .shadow(color: sphereColor.opacity(0.4), radius: 20, x: 0, y: 10)
            
            // Particle effects for speaking state
            if currentState == .responding {
                ForEach(0..<8) { index in
                    Circle()
                        .fill(sphereColor.opacity(0.6))
                        .frame(width: 8, height: 8)
                        .offset(
                            x: cos(Double(index) * .pi / 4 + rotationAngle * .pi / 180) * 70,
                            y: sin(Double(index) * .pi / 4 + rotationAngle * .pi / 180) * 70
                        )
                        .scaleEffect(audioLevel > 0.1 ? 1.0 + audioLevel * 0.5 : 0.5)
                }
            }
        }
        .onAppear {
            startAnimations()
        }
        .onChange(of: currentState) { _, _ in
            updateAnimationForState()
        }
        .onChange(of: audioLevel) { _, _ in
            updateAudioAnimation()
        }
    }
    
    // MARK: - Computed Properties
    
    private var sphereColor: Color {
        switch currentState {
        case .standby:
            return Color.green
        case .listening:
            return Color.blue
        case .thinking:
            return Color.orange
        case .responding:
            return Color.purple
        case .paused:
            return Color.gray
        }
    }
    
    private var sphereGradientColors: [Color] {
        switch currentState {
        case .standby:
            return [
                Color.green,
                Color.green.opacity(0.8),
                Color.mint.opacity(0.6),
                Color.white.opacity(0.4),
                Color.green.opacity(0.5),
                Color.green
            ]
        case .listening:
            return [
                Color.blue,
                Color.cyan.opacity(0.8),
                Color.white.opacity(0.6),
                Color.blue.opacity(0.5),
                Color.cyan,
                Color.blue
            ]
        case .thinking:
            return [
                Color.orange,
                Color.yellow.opacity(0.8),
                Color.white.opacity(0.6),
                Color.orange.opacity(0.5),
                Color.yellow,
                Color.orange
            ]
        case .responding:
            return [
                Color.purple,
                Color.pink.opacity(0.8),
                Color.white.opacity(0.6),
                Color.purple.opacity(0.5),
                Color.pink,
                Color.purple
            ]
        case .paused:
            return [
                Color.gray,
                Color.gray.opacity(0.8),
                Color.white.opacity(0.4),
                Color.gray.opacity(0.6),
                Color.gray
            ]
        }
    }
    
    private var stateBasedScale: CGFloat {
        switch currentState {
        case .standby:
            return 1.0
        case .listening:
            return 1.1 + audioLevel * 0.2
        case .thinking:
            return 1.0 + abs(sin(rotationAngle * .pi / 180)) * 0.1
        case .responding:
            return 0.9 + audioLevel * 0.3 // Contract and expand with speech
        case .paused:
            return 0.95
        }
    }
    
    private var glowScale: CGFloat {
        switch currentState {
        case .listening:
            return pulseScale
        case .responding:
            return 1.0 + audioLevel * 0.4
        default:
            return 1.0
        }
    }
    
    private var glowOpacity: Double {
        switch currentState {
        case .standby:
            return 0.6
        case .listening:
            return 0.8
        case .thinking:
            return 0.7
        case .responding:
            return 0.9
        case .paused:
            return 0.3
        }
    }
    
    // MARK: - Animation Methods
    
    private func startAnimations() {
        // Continuous outer rotation
        withAnimation(.linear(duration: 10.0).repeatForever(autoreverses: false)) {
            rotationAngle = 360
        }
        
        // Counter-rotating inner shimmer
        withAnimation(.linear(duration: 6.0).repeatForever(autoreverses: false)) {
            innerRotation = -360
        }
        
        // Pulsing effect for listening state
        withAnimation(.easeInOut(duration: 1.5).repeatForever(autoreverses: true)) {
            pulseScale = 1.3
        }
        
        // Wave expansion for listening
        withAnimation(.easeOut(duration: 2.0).repeatForever(autoreverses: false)) {
            particleOffset = 1.0
        }
    }
    
    private func updateAnimationForState() {
        withAnimation(.easeInOut(duration: 0.4)) {
            // State changes will be reflected through computed properties
        }
    }
    
    private func updateAudioAnimation() {
        // Audio level changes are reflected immediately through computed properties
        // This provides real-time response to speech amplitude
    }
}

#Preview {
    ZStack {
        Color.black.ignoresSafeArea()
        VStack(spacing: 50) {
            EnhancedKrishiAISphere(
                isListening: false,
                currentState: .standby,
                audioLevel: 0.0
            )
            
            EnhancedKrishiAISphere(
                isListening: true,
                currentState: .listening,
                audioLevel: 0.5
            )
            
            EnhancedKrishiAISphere(
                isListening: false,
                currentState: .responding,
                audioLevel: 0.7
            )
        }
    }
}
