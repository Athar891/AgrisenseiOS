rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Marketplace products are readable by all, writable by authenticated users
    match /products/{productId} {
      allow read: if true;
      // Allow authenticated users to create products
      allow create: if request.auth != null && validateProductData(request.resource.data);
      // Allow users to update/delete their own products or admins to manage any product
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.sellerId ||
        request.auth.token.admin == true
      );
    }
    
    // Community posts - authenticated users can create, everyone can read
    match /community_posts/{postId} {
      // Allow read for all authenticated users
      allow read: if request.auth != null;
      
      // Allow create for authenticated users with valid data
      allow create: if request.auth != null 
        && request.auth.uid != null
        && resource == null // Ensure document doesn't exist
        && validatePostData(request.resource.data);
      
      // Allow update/delete only for the post author or for like/unlike operations
      allow update: if request.auth != null && (
        // Author can update all fields
        request.auth.uid == resource.data.userId ||
        // Any authenticated user can update likes and likedByUsers array
        (
          // Only allow updating specific fields for non-authors
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedByUsers']) &&
          // Ensure likes count is only incremented or decremented by 1
          (
            request.resource.data.likes == resource.data.likes + 1 ||
            request.resource.data.likes == resource.data.likes - 1
          )
        )
      );
      
      // Only author can delete the post
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && validateCommentData(request.resource.data);
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }
    
    // Default deny for all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
  
  // Validation functions
  function validatePostData(data) {
    return data.keys().hasAll(['title', 'content', 'category', 'author', 'userId', 'timestamp'])
      && data.title is string && data.title.size() > 0 && data.title.size() <= 200
      && data.content is string && data.content.size() > 0 && data.content.size() <= 5000
      && data.category is string && data.category in ['farming', 'technology', 'market', 'weather', 'equipment']
      && data.author is string && data.author.size() > 0
      && data.userId is string && data.userId == request.auth.uid
      && data.timestamp is number
      // Optional fields
      && (!('imageUrl' in data) || data.imageUrl is string)
      && (!('likedByUsers' in data) || data.likedByUsers is list);
  }
  
  function validateCommentData(data) {
    return data.keys().hasAll(['author', 'content', 'timestamp', 'userId'])
      && data.author is string && data.author.size() > 0
      && data.content is string && data.content.size() > 0 && data.content.size() <= 1000
      && data.timestamp is number
      && data.userId is string && data.userId == request.auth.uid;
  }
  
  function validateProductData(data) {
    return data.keys().hasAll(['name', 'description', 'price', 'unit', 'category', 'stock', 'location', 'sellerId', 'sellerName', 'createdAt'])
      && data.name is string && data.name.size() > 0 && data.name.size() <= 100
      && data.description is string && data.description.size() > 0 && data.description.size() <= 1000
      && data.price is number && data.price > 0
      && data.unit is string && data.unit.size() > 0
      && data.category is string
      && data.stock is number && data.stock >= 0
      && data.location is string && data.location.size() > 0
      && data.sellerId is string && data.sellerId == request.auth.uid
      && data.sellerName is string && data.sellerName.size() > 0
      && data.createdAt is timestamp
      // Optional fields
      && (!('imageUrls' in data) || data.imageUrls is list)
      && (!('updatedAt' in data) || data.updatedAt is timestamp)
      && (!('rating' in data) || data.rating is number)
      && (!('reviewCount' in data) || data.reviewCount is number)
      && (!('isActive' in data) || data.isActive is bool);
  }
}
